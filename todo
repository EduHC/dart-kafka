[] Create retry strategy for erros that are allowed to do it
    -- All the retryable erros are related to the Broker, server, etc.
    -- If there is a need of retry, the message input still the same (so, the byte-array is also the same)
    -- but need to review the Broker it's being sent or wait some time

    -- Change the code to select the Broker to send to in the "TrafficController", so it dynamically select it at the time it'll send a message.

[] Make the dart-kafka itself handle the Metadata request
[] Make the dart-kafka ifself make the "ApiVersions" request, store the value and use the highest version available if not specified by the client
[] Create a singleton to initiate the Utils, Encoder and Decoder classes and reuse 'em in everywhere possible
[] Create an error handler for every message return.
[] Split the "Partition" model to each usage it has with different fields
[] Adjust the JoinGroup API
[] Implement the OffsetFetch API
[] Implement the OffsetCommit API
[] Implement the FindGroupCoordinator API


[-] Implement the LeaveGroup API
[] Implement the SyncGroup API
[] Creathe the "subscribe" method that handles the Group Coordination logic.
[] Implement the OffsetCommit API
[] Implement the OffsetFetch API
[] Implement the ListGroup API


[x] Refactor the API classes to use the Encoder and Decoder classes
[x] Remove from the Utils class every method related to Encode or Decode
[x] Refactor the Request and Response controllers to be one single class that handles the traffic
[x] Adjust the JoinGroup API
[x] Implement the FindGroupCoordinator API


